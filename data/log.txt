**take the initiative** 

Graph transform log:

            V       E       E/V     Origin  I:SX    SCC     loop (declare)  box_cover(a+b)  
r1  YEAST   2361    7182    3.04    g       match   2361    0 (536)
r2  ODLIS   2909    18419   6.33    net     trick   1028*   30+ (5) 
r3  ERDOS   6927    11850   1.71    net     match   6927    0 (NA)
r4  ?????   6301    20777   3.30
r5  ROGET   1022    5075    4.97    net     trick   77      20+ (1)

s6  SYN-1   3073    37615   12.24   g       -       3073    0
s8  SYN-2   5651    15968   2.83    g       -       5651    0
s9  SYN-3   4880    27946   5.73    g       -       4880    0

    TEST    7       12      1.71    net     -       7       0

** r4 not included in paper


Process Verified:
    net2g   g2gu    scc&sn  uncover_bipartite   tc   normal_hop hop_with_tc
    √       √       √       √                   √


2hop: not work on TC(G)-, TC(G)- lose the transitive property

Java TC check with C++ Normal hop:
<i, j>


RB's trick cause majority of graph changed
TC: a < b, up-right
TC_MNS: all a > b, some a < b

RB's normal hop

trick e.g. in ODLIS
    before:
92 690
92 526
92 88   *
92 2793
92 1990
92 21   *
    after:
92 690
92 526
88 92
88 2793
88 1990
21 88

files index
0 ERDOS.net.g.u.sn
1 ODLIS.net.g.u.sn
2 ROGET.net.g.u.sn
3 SYN-1.g.u.sn
4 SYN-2.g.u.sn
5 SYN-3.g.u.sn
6 TEST.net.g.u.sn
7 YEAST.g.u.sn
   
    
Problems
SCC and loop not match


Sync with byron

Oct.28
normal hop is for TC(G-)
the heuristic is maximal biclique?
you are not doing u2hop.
no partitioning at this point.
as you may know from zhe, i hope that you work on the private intersection approach


Oct。24
hihi, though we are not adding new results to dasfaa shots, do you have any updates for me?
just wanted to be more in sync with you. (Yun and zhe often write me a couple lines regularly. :))
i would be eager to know the 2hop size for G-.:)


Oct.8
hi peipei, can 2hop program run on the TC(G)-?
coz i concern that the program may run out of memory as TC(G)- is quite large.
a try will give me an idea how much code is needed. (if too much coding is needed, we need to think about alternatives)


Oct.3
the problem that we were discussing is called: complete bipartite graph.
given a bipartite graph, we want to find the maximum complete bipartitie subgraph.
this is again an NP-hard problem.


Oct.2
peipei, shuxiang told me that the 2hop sizes increase greatly towards the end of the program -- the last few nodes take a lot of space.
if you could log the increase of the 2hop size in a file, it would be help.
we could check if it is possible to avoid sharp increases in sizes.

let say, for each iteration, you append the current 2hop size in a log file.

when we read the log file and see how the 2hop size increase... may tell us something.

this is just one more thing that Shuxiang told me.
a separate test after testing random ordering.
now, let say we just push all |Lin(u) \cap Lout(v)| >= 1.
maybe, I just want to verify that this requirement makes the 2hop size quite big already.
that is, adding this: IF |Lin(u) \cap Lout(v)| >= 1 THEN do nothing ELSE add dummpy as before.

Pushing all the empty intersections to size of 1 already leads to a big increase in 2hop sizes. I gchat you after dinner



With Shuxiang
